name: 'Repository Cleanup Workflow'
run-name: "Repository Cleanup: [${{ inputs.scope || github.event_name }}]"
on:
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight UTC
  workflow_dispatch:
    inputs:
      scope:
        default: 'all'
        description: 'Scope (e.g., all, runs, tags)'
        options:
          - 'all'
          - 'branches'
          - 'releases'
          - 'runs'
          - 'tags'
        required: true
        type: choice
      date:
        default: '7 days ago'
        description: 'Keep runs created on or newer (e.g., now)'
        required: true
        type: string
      simulate:
        default: false
        description: 'Simulate (skip any deletion requests)'
        required: false
        type: boolean

permissions:
  actions: write
  contents: write

jobs:
  cleanup_branches:
    if: (github.event_name == 'workflow_dispatch' && (inputs.scope == 'all' || inputs.scope == 'branches')) || github.event_name == 'schedule'
    runs-on: ubuntu-24.04
    steps:
      - name: Compose lists of stable and testing branches
        id: group_branches
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          URL="/repos/${{ github.repository }}/branches?per_page=100"
          gh api \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "${URL}" --paginate > 'branches.json' || truncate -s 0 -- 'branches.json'
          {
            echo 'stable<<EOF'
            {
               cat 'branches.json' | jq ".[] | if .name != \"main\" then .name else empty end | capture(\"(?<name>^[0-9a-zA-Z]+-7\\\\.[0-9]+(\\\\.[0-9]+)?)$\") | .name" || true
            } | sort -V
            echo EOF
          } >> "$GITHUB_OUTPUT"
          {
            echo 'testing<<EOF'
            {
               cat 'branches.json' | jq ".[] | if .name != \"main\" then .name else empty end | capture(\"(?<name>^[0-9a-zA-Z]+-7\\\\.[0-9]+(\\\\.[0-9]+)?(ab|alpha|beta|rc)[0-9]+)$\") | .name" || true
            } | sort -V
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Compose a list of stale branches
        id: detect_stale_branches
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          BRANCHES_STABLE="${{ steps.group_branches.outputs.stable }}"
          BRANCHES_TESTING="${{ steps.group_branches.outputs.testing }}"
          {
            echo 'list<<EOF'
            for BRANCH in "${BRANCHES_TESTING[@]}"; do
              LABEL="$(echo "${BRANCH}" | sed -nr 's/([0-9a-zA-Z]+)-7\.[0-9]+(\.[0-9]+)?(ab|alpha|beta|rc)[0-9]+/\1/p')"
              [ -z "${LABEL}" ] && continue
              if ! { echo "${BRANCHES_STABLE}" | grep -- "${LABEL}-" | tail -1 | awk '{print $1 "-x"}'; echo "${BRANCH}-x"; } | sort -V | tail -1 | grep -q "${BRANCH}-x"; then echo "${BRANCH}"; fi
            done
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Delete stale branches
        id: delete_branches
        if: ${{ (github.event_name == 'workflow_dispatch' && !inputs.simulate) || github.event_name == 'schedule' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          URL="/repos/${{ github.repository }}/git/refs/heads/"
          BRANCHES="${{ steps.detect_stale_branches.outputs.list }}"
          for BRANCH in "${BRANCHES[@]}"; do
            gh api \
              --method DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "${URL}${BRANCH}" || true
          done

      - name: Compose a job summary
        id: compose_summary
        run: |
          {
            echo -e "- Stable branches:\n\`\`\`\n${{ steps.group_branches.outputs.stable }}\n\`\`\`"
            echo -e "- Testing branches:\n\`\`\`\n${{ steps.group_branches.outputs.testing }}\n\`\`\`"
            echo -e "- Branches to delete:\n\`\`\`\n${{ steps.detect_stale_branches.outputs.list }}\n\`\`\`"
          } >> "$GITHUB_STEP_SUMMARY"

  cleanup_releases:
    needs: cleanup_branches
    if: (github.event_name == 'workflow_dispatch' && (inputs.scope == 'all' || inputs.scope == 'releases')) || github.event_name == 'schedule'
    runs-on: ubuntu-24.04
    steps:
      - name: Compose lists of stable and testing releases
        id: group_releases
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          URL="/repos/${{ github.repository }}/releases?per_page=100"
          gh api \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "${URL}" --paginate > 'releases.json' || truncate -s 0 -- 'releases.json'
          {
            echo 'stable<<EOF'
            {
               cat 'releases.json' | jq ".[].tag_name | capture(\"(?<name>^v7\\\\.[0-9]+(\\\\.[0-9]+)?-[0-9a-zA-Z]+)$\") | .name" || true
            } | sort -V
            echo EOF
          } >> "$GITHUB_OUTPUT"
          {
            echo 'testing<<EOF'
            {
               cat 'releases.json' | jq ".[].tag_name | capture(\"(?<name>^v7\\\\.[0-9]+(\\\\.[0-9]+)?(ab|alpha|beta|rc)[0-9]+-[0-9a-zA-Z]+)$\") | .name" || true
            } | sort -V
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Compose a list of stale releases
        id: detect_stale_releases
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          RELEASES_STABLE="${{ steps.group_releases.outputs.stable }}"
          RELEASES_TESTING="${{ steps.group_releases.outputs.testing }}"
          {
            echo 'list<<EOF'
            for RELEASE in "${RELEASES_TESTING[@]}"; do
              LABEL="$(echo "${RELEASE}" | sed -nr 's/v7\.[0-9]+(\.[0-9]+)?(ab|alpha|beta|rc)[0-9]+-([0-9a-zA-Z]+)/\3/p')"
              [ -z "${LABEL}" ] && continue
              if ! { echo "${RELEASES_STABLE}" | grep -- "-${LABEL}" | tail -1; echo "${RELEASE}"; } | sort -V | tail -1 | grep -q "${RELEASE}"; then echo "${RELEASE}"; fi
            done
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Delete stale releases
        id: delete_releases
        if: ${{ (github.event_name == 'workflow_dispatch' && !inputs.simulate) || github.event_name == 'schedule' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          URL="/repos/${{ github.repository }}/releases/"
          RELEASES="${{ steps.detect_stale_releases.outputs.list }}"
          for RELEASE in "${RELEASES[@]}"; do
            FOUND='true'
            ID="$(gh api \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "${URL}tags/${RELEASE}" \
              --jq '.id')" || FOUND='false'
            if [ -n "${ID}" ] && [ "${FOUND}" == 'true' ]; then
              gh api \
                --method DELETE \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "${URL}${ID}" || true
            fi
          done

      - name: Compose a job summary
        id: compose_summary
        run: |
          {
            echo -e "- Stable releases:\n\`\`\`\n${{ steps.group_releases.outputs.stable }}\n\`\`\`"
            echo -e "- Testing releases:\n\`\`\`\n${{ steps.group_releases.outputs.testing }}\n\`\`\`"
            echo -e "- Releases to delete:\n\`\`\`\n${{ steps.detect_stale_releases.outputs.list }}\n\`\`\`"
          } >> "$GITHUB_STEP_SUMMARY"

  cleanup_tags:
    needs: cleanup_releases
    if: (github.event_name == 'workflow_dispatch' && (inputs.scope == 'all' || inputs.scope == 'tags')) || github.event_name == 'schedule'
    runs-on: ubuntu-24.04
    steps:
      - name: Compose a list of tags mentioned in branches
        id: fetch_tags_in_branches
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          URL="/repos/${{ github.repository }}/branches?per_page=100"
          COMMITS="$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "${URL}" --paginate \
            --jq '.[] | if .name != "main" then .commit.sha else empty end' || true)"
          {
            echo 'list<<EOF'
            {
              for COMMIT in "${COMMITS[@]}"; do
                URL="/repos/${{ github.repository }}/commits/${COMMIT}"
                TAG="$(gh api \
                  -H "Accept: application/vnd.github+json" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  "${URL}" \
                  --jq ".commit.message | capture(\"/${{ github.repository }}/releases/tag/(?<name>v7\\\\.[0-9]+(\\\\.[0-9]+)?((ab|alpha|beta|rc)[0-9]+)?-[0-9a-zA-Z]+)\") | .name" || true)"
                if [ -n "${TAG}" ]; then
                  echo "${TAG}"
                fi
              done
            } | sort -uV
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Compose a list of tags mentioned in releases
        id: fetch_tags_in_releases
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          URL="/repos/${{ github.repository }}/releases?per_page=100"
          {
            echo 'list<<EOF'
            {
              gh api \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "${URL}" --paginate \
                --jq ".[].tag_name | capture(\"(?<name>v7\\\\.[0-9]+(\\\\.[0-9]+)?((ab|alpha|beta|rc)[0-9]+)?-[0-9a-zA-Z]+)\") | .name" || true
            } | sort -uV
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Compose a list of stale tags not mentioned in branches or releases
        id: detect_stale_tags
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          URL="/repos/${{ github.repository }}/tags?per_page=100"
          TAGS="$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "${URL}" --paginate \
            --jq ".[].name | capture(\"(?<name>v7\\\\.[0-9]+(\\\\.[0-9]+)?((ab|alpha|beta|rc)[0-9]+)?-[0-9a-zA-Z]+)\") | .name" || true)"
          TAGS_IN_BRANCHES="${{ steps.fetch_tags_in_branches.outputs.list }}"
          TAGS_IN_RELEASES="${{ steps.fetch_tags_in_releases.outputs.list }}"
          {
            echo 'list<<EOF'
            {
              for TAG in "${TAGS[@]}"; do
                echo "${TAGS_IN_BRANCHES}" | grep -q "${TAG}" && continue
                echo "${TAGS_IN_RELEASES}" | grep -q "${TAG}" && continue
                echo "${TAG}"
              done
            } | sort -V
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Delete stale tags
        id: delete_tags
        if: ${{ (github.event_name == 'workflow_dispatch' && !inputs.simulate) || github.event_name == 'schedule' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          URL="/repos/${{ github.repository }}/git/refs/tags/"
          TAGS="${{ steps.detect_stale_tags.outputs.list }}"
          for TAG in "${TAGS[@]}"; do
            gh api \
              --method DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "${URL}${TAG}" || true
          done

      - name: Compose a job summary
        id: compose_summary
        run: |
          {
            echo -e "- Tags in branches:\n\`\`\`\n${{ steps.fetch_tags_in_branches.outputs.list }}\n\`\`\`"
            echo -e "- Tags in releases:\n\`\`\`\n${{ steps.fetch_tags_in_releases.outputs.list }}\n\`\`\`"
            echo -e "- Tags to delete:\n\`\`\`\n${{ steps.detect_stale_tags.outputs.list }}\n\`\`\`"
          } >> "$GITHUB_STEP_SUMMARY"

  cleanup_runs:
    needs: cleanup_tags
    if: (github.event_name == 'workflow_dispatch' && (inputs.scope == 'all' || inputs.scope == 'runs')) || github.event_name == 'schedule'
    runs-on: ubuntu-24.04
    steps:
      - name: Compose a list of workflow runs mentioned in branches
        id: fetch_runs_in_branches
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          URL="/repos/${{ github.repository }}/branches?per_page=100"
          COMMITS="$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "${URL}" --paginate \
            --jq '.[] | if .name != "main" then .commit.sha else empty end' || true)"
          {
            echo 'list<<EOF'
            {
              for COMMIT in "${COMMITS[@]}"; do
                URL="/repos/${{ github.repository }}/commits/${COMMIT}"
                RUN="$(gh api \
                  -H "Accept: application/vnd.github+json" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  "${URL}" \
                  --jq ".commit.message | capture(\"/${{ github.repository }}/actions/runs/(?<id>.*?)/\") | .id" || true)"
                if [ -n "${RUN}" ]; then
                  echo "${RUN}"
                fi
              done
            } | sort -u
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Compose a list of workflow runs mentioned in releases
        id: fetch_runs_in_releases
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          URL="/repos/${{ github.repository }}/releases?per_page=100"
          {
            echo 'list<<EOF'
            {
              gh api \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "${URL}" --paginate \
                --jq ".[].body | capture(\"/${{ github.repository }}/actions/runs/(?<id>.*?)/\") | .id" || true
            } | sort -u
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Compose a list of stale workflow runs not mentioned in branches or releases
        id: detect_stale_runs
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          URL="/repos/${{ github.repository }}/actions/runs?per_page=100"
          DATE="$(date +%Y-%m-%d -d "${{ inputs.date || '7 days ago' }}" || date +%Y-%m-%d -d "90 days ago")"
          RUNS="$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "${URL}&created=<${DATE}" --paginate \
            --jq '.workflow_runs[].id' || true)"
          RUNS_IN_BRANCHES="${{ steps.fetch_runs_in_branches.outputs.list }}"
          RUNS_IN_RELEASES="${{ steps.fetch_runs_in_releases.outputs.list }}"
          {
            echo 'list<<EOF'
            for RUN in "${RUNS[@]}"; do
              echo "${RUNS_IN_BRANCHES}" | grep -q "${RUN}" && continue
              echo "${RUNS_IN_RELEASES}" | grep -q "${RUN}" && continue
              echo "${RUN}"
            done
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Delete stale workflow runs
        id: delete_runs
        if: ${{ (github.event_name == 'workflow_dispatch' && !inputs.simulate) || github.event_name == 'schedule' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          URL="/repos/${{ github.repository }}/actions/runs/"
          RUNS="${{ steps.detect_stale_runs.outputs.list }}"
          for RUN in "${RUNS[@]}"; do
            gh api \
              --method DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "${URL}${RUN}" || true
          done

      - name: Compose a job summary
        id: compose_summary
        run: |
          {
            echo -e "- Runs in branches:\n\`\`\`\n${{ steps.fetch_runs_in_branches.outputs.list }}\n\`\`\`"
            echo -e "- Runs in releases:\n\`\`\`\n${{ steps.fetch_runs_in_releases.outputs.list }}\n\`\`\`"
            echo -e "- Runs to delete:\n\`\`\`\n${{ steps.detect_stale_runs.outputs.list }}\n\`\`\`"
          } >> "$GITHUB_STEP_SUMMARY"
