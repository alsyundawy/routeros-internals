name: Vendor RouterOS 7.x Internals Workflow
on:
  push:
    branches:
      - main

permissions:
  contents: write

env:
  BRANCH_HOST: 'download.mikrotik.com'
  BRANCH_PREFIX: 'vendor'
  BRANCH_VERSION: ${{ secrets.VENDOR_BRANCH_VERSION }}

jobs:
  Download_Files:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        channel: [ stable ]
        #channel: [ stable, testing ]
    env:
      TZ: 'Europe/London'
    steps:
      - name: Get the latest version
        run: |
          if [[ -z "${{ env.BRANCH_VERSION }}" ]]; then
            BRANCH_VERSION_URL="https://${{ env.BRANCH_HOST }}/routeros/NEWESTa7.${{ matrix.channel }}"
            echo "BRANCH_VERSION_URL=${BRANCH_VERSION_URL}"
            BRANCH_VERSION=$(wget -nv -O - ${BRANCH_VERSION_URL} | cut -d ' ' -f1)
            echo "BRANCH_VERSION=${BRANCH_VERSION}"
          fi
          echo "BRANCH_VERSION=${BRANCH_VERSION}" >> $GITHUB_ENV

      - name: Cache files
        id: cache-files
        uses: actions/cache@v4
        with:
          key: ${{ env.BRANCH_PREFIX }}-${{ matrix.channel }}-${{ env.BRANCH_VERSION }}
          lookup-only: true
          path: |
            changelog.txt
            arm64
            x86

      - name: Get a changelog
        if: steps.cache-files.outputs.cache-hit != 'true'
        run: |
          BRANCH_CHANGELOG_URL="https://${{ env.BRANCH_HOST }}/routeros/${BRANCH_VERSION}/CHANGELOG"
          echo "BRANCH_CHANGELOG_URL=${BRANCH_CHANGELOG_URL}"
          wget -nv -O changelog.txt ${BRANCH_CHANGELOG_URL}

      - name: Download files
        if: steps.cache-files.outputs.cache-hit != 'true'
        run: |
          ARHCS=(arm64 x86)
          PACKAGES=(routeros calea container dude extra-nic gps iot iot-bt-extra lora rose-storage switch-marvell tr069-client ups user-manager wifi-qcom wireless zerotier)
          for ARCH in ${ARHCS[@]}; do
            mkdir -p ${ARCH}
            if [ "${ARCH}" == 'x86' ]; then
              SUFFIX=''
            else
              SUFFIX="-${ARCH}"
            fi
            IMG_FILE="${ARCH}/chr-${BRANCH_VERSION}${SUFFIX}.img.zip"
            IMG_URL="https://${{ env.BRANCH_HOST }}/routeros/${BRANCH_VERSION}/chr-${BRANCH_VERSION}${SUFFIX}.img.zip"
            wget -nv -O ${IMG_FILE} ${IMG_URL} || rm -f ${IMG_FILE}
            ISO_FILE="${ARCH}/mikrotik-${BRANCH_VERSION}${SUFFIX}.iso"
            ISO_URL="https://${{ env.BRANCH_HOST }}/routeros/${BRANCH_VERSION}/mikrotik-${BRANCH_VERSION}${SUFFIX}.iso"
            wget -nv -O ${ISO_FILE} ${ISO_URL} || rm -f ${ISO_FILE}
            for PACKAGE in ${PACKAGES[@]}; do
              FILE="${ARCH}/${PACKAGE}-${BRANCH_VERSION}${SUFFIX}.npk"
              URL="https://${{ env.BRANCH_HOST }}/routeros/${BRANCH_VERSION}/${PACKAGE}-${BRANCH_VERSION}${SUFFIX}.npk"
              wget -nv -O ${FILE} ${URL} || rm -f ${FILE}
            done
          done

  Obtain_Internals:
    needs: Download_Files
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        channel: [ stable ]
        #channel: [ stable, testing ]
    env:
      TZ: 'Europe/London'
    steps:
      - name: Install requirements leveraging cache
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          execute_install_scripts: true
          packages: binutils-common binwalk bzip2 genisoimage gzip lz4 lzma lzop rsync xz-utils zip zstd
          version: 1.0

      #- name: Install requirements
      #  run: |
      #    echo $(uname -a)
      #    sudo apt update > /dev/null
      #    sudo apt install -y binutils-common binwalk bzip2 genisoimage gzip lz4 lzma lzop rsync xz-utils zip zstd
      #    #sudo apt install -y dosfstools extlinux mkisofs qemu-utils xorriso > /dev/null
      #    #sudo modprobe nbd > /dev/null

      #- name: Install Python
      #  uses: actions/setup-python@v5
      #  with:
      #    python-version: '3.11'

      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Prepare scripts
        run: |
          wget -nv -O /tmp/extract-vmlinux.sh "https://raw.githubusercontent.com/torvalds/linux/master/scripts/extract-vmlinux" || true
          cp -r ./MikroTikPatch /tmp/
          cp ./*.py /tmp/
          cp ./*.sh /tmp/
          chmod +x /tmp/*.sh        

      - name: Get the latest version
        run: |
          if [[ -z "${{ env.BRANCH_VERSION }}" ]]; then
            BRANCH_VERSION_URL="https://${{ env.BRANCH_HOST }}/routeros/NEWESTa7.${{ matrix.channel }}"
            echo "BRANCH_VERSION_URL=${BRANCH_VERSION_URL}"
            BRANCH_VERSION=$(wget -nv -O - ${BRANCH_VERSION_URL} | cut -d ' ' -f1)
            echo "BRANCH_VERSION=${BRANCH_VERSION}"
          fi
          echo "BRANCH_VERSION=${BRANCH_VERSION}" >> $GITHUB_ENV

      - name: Prepare an empty branch
        run: |
          BRANCH_NAME="${{ env.BRANCH_PREFIX }}-${{ matrix.channel }}-${{ env.BRANCH_VERSION }}"
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
          git switch --orphan ${BRANCH_NAME}

      - name: Cache files
        id: cache-files
        uses: actions/cache@v4
        with:
          key: ${{ env.BRANCH_PREFIX }}-${{ matrix.channel }}-${{ env.BRANCH_VERSION }}
          path: |
            changelog.txt
            arm64
            x86

      - name: Unpack ISO files
        run: |
          ARHCS=(arm64 x86)
          for ARCH in ${ARHCS[@]}; do
            ISO_FILES=$(find ${ARCH}/* -maxdepth 1 -type f -name '*.iso')
            for ISO_FILE in ${ISO_FILES}; do
              /tmp/unpack.sh "${ISO_FILE}" || true
              
              NPK_FILES=$(find $(dirname ${ISO_FILE})/_$(basename ${ISO_FILE})/* -type f -name '*.npk')
              for NPK_FILE in ${NPK_FILES}; do
                HASH1="$(sha256sum "${NPK_FILE}" | gawk '{ print $1 }')"
                HASH2="$(sha256sum "$(dirname "${ISO_FILE}")/$(basename "${NPK_FILE}")" | gawk '{ print $1 }')"
                if [ "${HASH1}" == "${HASH2}" ]; then
                  rm ${NPK_FILE}
                  ln -s ../$(basename ${NPK_FILE}) ${NPK_FILE}
                fi
              done
              
              echo -e "#### Notes:\n- Some NPK files are replaced with symlinks to save space, if their SHA256 hashes match those of NPK files downloaded separately.\n" >> "$(dirname ${ISO_FILE})/_$(basename ${ISO_FILE})/README.md"
            done
          done

      - name: Unpack IMG files
        run: |
          ARHCS=(arm64 x86)
          for ARCH in ${ARHCS[@]}; do
            IMG_FILES=$(find ${ARCH}/_*.iso/* -maxdepth 1 -type f -name '*.img')
            for IMG_FILE in ${IMG_FILES}; do
              /tmp/unpack.sh "${IMG_FILE}" || true
            done
          done

      - name: Unpack NPK files
        run: |
          ARHCS=(arm64 x86)
          for ARCH in ${ARHCS[@]}; do
            NPK_FILES=$(find ${ARCH}/* -maxdepth 1 -type f -name '*.npk')
            for NPK_FILE in ${NPK_FILES}; do
              NPK_FILE_DIR="$(dirname "${NPK_FILE}")/_$(basename "${NPK_FILE}")"
              python /tmp/unpack-npk.py "${NPK_FILE}" || true
            done
          done

      - name: Unpack SFS files
        run: |
          ARHCS=(arm64 x86)
          for ARCH in ${ARHCS[@]}; do
            SFS_FILES=$(find ${ARCH}/_*.npk/* -maxdepth 1 -type f -name '*.sfs')
            for SFS_FILE in ${SFS_FILES}; do
              SFS_FILE_DIR="$(dirname "${SFS_FILE}")/_$(basename "${SFS_FILE}")"
              unsquashfs -d ${SFS_FILE_DIR} ${SFS_FILE} || true
            done
          done

      - name: Unpack EFI files
        run: |
          ARHCS=(arm64 x86)
          for ARCH in ${ARHCS[@]}; do
            EFI_FILES=$(find ${ARCH}/_*.npk/*.files/* -maxdepth 2 -type f -path "${ARCH}/_*.npk/*.files/boot/kernel")
            for EFI_FILE in ${EFI_FILES}; do
              /tmp/unpack-bzimage.sh "${EFI_FILE}" || true
            done
            EFI_FILES=$(find ${ARCH}/_*.npk/_*.sfs/* -maxdepth 4 -type f -path "${ARCH}/_*.npk/_*.sfs/boot/EFI/BOOT/*.EFI")
            for EFI_FILE in ${EFI_FILES}; do
              /tmp/unpack-bzimage.sh "${EFI_FILE}" || true
            done
          done

      - name: Add files, commit and push
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: ${{ env.BRANCH_NAME }}
          create_branch: true
          push_options: '--force'
