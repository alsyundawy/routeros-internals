name: 'Vendor RouterOS 7.x Internals Workflow'
run-name: "RouterOS 7.x: [${{ inputs.host }}]-[${{ inputs.prefix }}]-[${{ inputs.channel }}]-[${{ inputs.version }}]-[${{ inputs.scope }}]"
on:
#  push:
#    branches:
#      - main
  workflow_dispatch:
    inputs:
      host:
        description: 'Host (e.g., dl.example.com)'
        required: true
        default: 'download.mikrotik.com'
        type: string
      prefix:
        description: 'Prefix (e.g., vendor)'
        required: true
        default: 'vendor'
        type: string
      channel:
        description: 'Channel (e.g., stable)'
        required: true
        default: 'stable'
        type: choice
        options:
          - 'stable'
          - 'testing'
          - 'stable,testing'
      version:
        description: 'Version (e.g., 7.19.4; empty means latest)'
        required: false
        default: 'latest'
        type: string
      scope:
        description: 'Scope of work (do jobs up to, inclusive)'
        required: true
        default: 'process'
        type: choice
        options:
          - 'validate'
          - 'download'
          - 'process'
      release:
        description: 'Release files (or upload an artifact)'
        required: false
        default: true
        type: boolean
      reuse_releases:
        default: true
        description: 'Download: reuse released files'
        required: false
        type: boolean
      reuse_commits:
        default: true
        description: 'Download: reuse committed files'
        required: false
        type: boolean
      override_cache:
        default: false
        description: 'Download: override cached files'
        required: false
        type: boolean
      extra_args:
        default: '{"process_ignore_files":"false","no_push":"false"}'
        description: 'JSON of additional options'
        required: false
        type: string

permissions:
  actions: write
  contents: write

env:
  TZ: 'Europe/London'

jobs:
  validate:
    runs-on: ubuntu-24.04
    outputs:
      host: ${{ steps.validate_host.outputs.host }}
      prefix: ${{ steps.validate_prefix.outputs.prefix }}
      channel: ${{ steps.validate_channel.outputs.channel }}
      version: ${{ steps.validate_version.outputs.version }}
      matrix: ${{ steps.generate_matrix.outputs.matrix }}
      scope: ${{ steps.validate_scope.outputs.scope }}
      scope_has_download: ${{ steps.validate_scope.outputs.download }}
      scope_has_process: ${{ steps.validate_scope.outputs.process }}
    steps:
      - name: Validate host value
        id: validate_host
        run: |
          HOST="$(echo "${{ inputs.host }}" | xargs)"
          if [ -z "$(echo "${HOST}" | grep -P '(?=^.{1,254}$)(^(?>(?!\d+\.)[a-zA-Z0-9_\-]{1,63}\.?)+(?:[a-zA-Z]{2,})$)')" ]; then
            echo "::error input=host,value=${HOST}::Invalid host value"
            exit 1
          fi
          echo "host=${HOST}" >> $GITHUB_OUTPUT

      - name: Validate prefix value
        id: validate_prefix
        run: |
          PREFIX="$(echo "${{ inputs.prefix }}" | xargs)"
          if [ -z "$(echo "${PREFIX}" | grep -P '^[0-9a-zA-Z]+$')" ]; then
            echo "::error input=prefix,value=${PREFIX}::Invalid prefix value"
            exit 1
          fi
          echo "prefix=${PREFIX}" >> $GITHUB_OUTPUT

      - name: Validate channel value
        id: validate_channel
        run: |
          CHANNEL="$(echo "${{ inputs.channel }}" | xargs)"
          readarray -d ',' -t CHANNELS < <(printf '%s' "${CHANNEL}")
          for CHANNEL in ${CHANNELS[@]}; do
            if [ "${CHANNEL}" != "stable" -a "${CHANNEL}" != "testing" ]; then
              echo "::error input=channel,value=${CHANNEL}::Invalid channel value"
              exit 1
            fi
          done
          printf -v CHANNEL '%s,' "${CHANNELS[@]}"
          echo "channel=${CHANNEL%,}" >> $GITHUB_OUTPUT

      - name: Validate version value
        id: validate_version
        run: |
          VERSION="$(echo "${{ inputs.version }}" | xargs)"
          CHANNEL="$(echo "${{ steps.validate_channel.outputs.channel }}" | xargs)"
          if [ -n "${VERSION}" -a "${VERSION}" != "latest" ]; then
            if [ -n "$(echo "${CHANNEL}" | grep ',')" ]; then
              echo "::error input=version,value=${VERSION}::Same version value can't apply to multiple channels"
              exit 1
            elif [ "${CHANNEL}" == "stable" ]; then
              if [ -z "$(echo "${VERSION}" | grep -P '^7\.[0-9]+(\.[0-9]+)?$')" ]; then
                echo "::error input=version,value=${VERSION}::Invalid version value for the ${CHANNEL} channel"
                exit 1
              fi
            elif [ "${CHANNEL}" == "testing" ]; then
              if [ -z "$(echo "${VERSION}" | grep -P '^7\.[0-9]+(\.[0-9]+)?(ab|beta|rc)[0-9]+$')" ]; then
                echo "::error input=version,value=${VERSION}::Invalid version value for the ${CHANNEL} channel"
                exit 1
              fi
            else
              echo "::warning::Unknown channel value, so version value has not been validated"
            fi
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Generate matrix using channel and version values
        id: generate_matrix
        run: |
          readarray -d ',' -t CHANNELS < <(printf '%s' "${{ steps.validate_channel.outputs.channel }}")
          VERSION="${{ steps.validate_version.outputs.version }}"
          JSON=""
          for CHANNEL in ${CHANNELS[@]}; do
            if [ -z "${VERSION}" -o "${VERSION}" == "latest" ]; then
              FILE="version_${CHANNEL}.txt"
              URL="https://${{ steps.validate_host.outputs.host }}/routeros/NEWESTa7.${CHANNEL}"
              wget -nv -O ${FILE} ${URL} || rm -f ${FILE}
              if [ ! -f "${FILE}" ]; then
                echo "::error::Failed to get the latest version for the ${CHANNEL} channel"
                exit 1
              fi
              LATEST="$(cat ${FILE} | cut -d ' ' -f1)" && rm -f "${FILE}"
            else
              LATEST="${VERSION}"
            fi
            [ ${#JSON} -ne 0 ] && JSON="${JSON},"
            REF="${{ steps.validate_prefix.outputs.prefix }}-${CHANNEL}-${LATEST}"
            TAG="v${LATEST}-${{ steps.validate_prefix.outputs.prefix }}"
            JSON="${JSON}{\"channel\":\"${CHANNEL}\",\"ref\":\"${REF}\",\"tag\":\"${TAG}\",\"version\":\"${LATEST}\"}"
          done
          JSON="[${JSON}]"
          echo "matrix=${JSON}" >> $GITHUB_OUTPUT

      - name: Validate scope value
        id: validate_scope
        run: |
          SCOPE="$(echo "${{ inputs.scope }}" | xargs)"
          if [ "${SCOPE}" == "validate" ]; then
            DOWNLOAD=false
            PROCESS=false
          elif [ "${SCOPE}" == "download" ]; then
            DOWNLOAD=true
            PROCESS=false
          elif [ "${SCOPE}" == "process" ]; then
            DOWNLOAD=true
            PROCESS=true
          else
            echo "::error input=scope,value=${SCOPE}::Invalid scope value"
            exit 1
          fi
          echo "scope=${SCOPE%,}" >> $GITHUB_OUTPUT
          echo "download=${DOWNLOAD}" >> $GITHUB_OUTPUT
          echo "process=${PROCESS}" >> $GITHUB_OUTPUT

      - name: Compose a step summary
        id: compose_summary
        run: |
          {
            echo "### Outputs"
            echo "- host: \`${{ steps.validate_host.outputs.host }}\`"
            echo "- prefix: \`${{ steps.validate_prefix.outputs.prefix }}\`"
            echo "- channel: \`${{ steps.validate_channel.outputs.channel }}\`"
            echo "- version: \`${{ steps.validate_version.outputs.version }}\`"
            echo "- matrix: \`${{ steps.generate_matrix.outputs.matrix }}\`"
            echo "- scope: \`${{ steps.validate_scope.outputs.scope }}\`"
            echo "- scope_has_download: \`${{ steps.validate_scope.outputs.download }}\`"
            echo "- scope_has_process: \`${{ steps.validate_scope.outputs.process }}\`"
            echo "- reuse_releases: \`${{ inputs.reuse_releases }}\`"
            echo "- reuse_commits: \`${{ inputs.reuse_commits }}\`"
            echo "- override_cache: \`${{ inputs.override_cache }}\`"
            echo "- extra_args: \`${{ inputs.extra_args }}\`"
          } >> $GITHUB_STEP_SUMMARY

  download:
    needs: validate
    if: needs.validate.outputs.scope_has_download == 'true'
    strategy:
      matrix:
        include: ${{ fromJSON(needs.validate.outputs.matrix) }}
    uses: ./.github/workflows/download.yml
    with:
      channel: ${{ matrix.channel }}
      host: ${{ needs.validate.outputs.host }}
      override_cache: ${{ inputs.override_cache }}
      prefix: ${{ needs.validate.outputs.prefix }}
      ref: ${{ matrix.ref }}
      reuse_commits: ${{ inputs.reuse_commits }}
      reuse_releases: ${{ inputs.reuse_releases }}
      tag: ${{ matrix.tag }}
      version: ${{ matrix.version }}

  process:
    needs:
      - validate
      - download
    if: needs.validate.outputs.scope_has_process == 'true'
    strategy:
      matrix:
        include: ${{ fromJSON(needs.validate.outputs.matrix) }}
    runs-on: ubuntu-24.04
    steps:
      - name: Install requirements leveraging cache
        id: install_requirements
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          execute_install_scripts: true
          packages: binutils-common binwalk bzip2 device-tree-compiler genisoimage gzip lz4 lzma lzop qemu-utils rsync xz-utils zip zstd
          version: 1.0

      - name: Checkout the main branch
        id: checkout_main
        uses: actions/checkout@v5

      - name: Copy executable files
        id: copy_files
        run: |
          cp -r ./* /tmp/
          chmod +x /tmp/*.py /tmp/*.sh

      - name: Prepare the current branch
        id: prepare_branch
        run: |
          BRANCH="${{ matrix.ref }}"
          git switch --orphan ${BRANCH}

#      - name: Checkout the current branch
#        id: checkout_branch
#        uses: actions/checkout@v5
#        with:
#          ref: ${{ matrix.ref }}

      - name: Restore files from cache
        id: restore_files
        uses: actions/cache/restore@v4
        with:
          key: ${{ matrix.ref }}
          path: |
            *.txt
            */*.iso
            */*.npk
            */*.tar.gz
            */*.zip

      - name: Remove unpacked files if any
        id: remove_files
        run: |
          sudo /tmp/cleanup.sh

      - name: Process files
        run: |
          if [ " ${{ fromJson(inputs.extra_args).process_ignore_files }}" != "true" ]; then
            sudo /tmp/process.sh
          fi

      - name: Create release files
        id: create_release
        run: |
          EXCL='exclusions.txt'
          sudo find * -type f -size +32M > "${EXCL}" || true
          
          DIR='release'
          mkdir -p "${DIR}"
          echo "dir=${DIR}" >> $GITHUB_OUTPUT
          
          FILE="${DIR}/routeros-${{ matrix.ref }}-full.tar.zst"
          sudo tar --zst -cf "${FILE}" --exclude='.git' --exclude="${DIR}" --exclude="${EXCL}" .
          echo "full=${FILE}" >> $GITHUB_OUTPUT
          du -h "${FILE}"
          
          FILE="${DIR}/routeros-${{ matrix.ref }}-light.tar.zst"
          sudo tar --zst -cf "${FILE}" --exclude='.git' --exclude="${DIR}" -X "${EXCL}" .
          echo "light=${FILE}" >> $GITHUB_OUTPUT
          du -h "${FILE}"

      - name: Delete duplicate release and tag
        id: delete_release
        if: ${{ inputs.release }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          ID="$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/releases/tags/${{ matrix.tag }} \
            --jq '.id')"
          if [ -n "${ID}" ]; then
            gh api --method DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{ github.repository }}/releases/${ID}          
            gh api --method DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{ github.repository }}/git/refs/tags/${{ matrix.tag }}
          fi

      - name: Upload release files as attachments
        id: upload_attachments
        if: ${{ inputs.release }}
        uses: softprops/action-gh-release@v2
        with:
          name: "RouterOS ${{ matrix.version }} by ${{ needs.validate.outputs.prefix }}"
          body_path: 'changelog.txt'
          tag_name: v${{ matrix.version }}-${{ needs.validate.outputs.prefix }}
          make_latest:  ${{ matrix.channel == 'stable' }}
          prerelease:  ${{ matrix.channel == 'testing' }}
          files: |
            ${{ steps.create_release.outputs.dir }}/*

      - name: Upload release files as artifacts
        id: upload_artifacts
        if: ${{ !inputs.release }}
        uses: actions/upload-artifact@v4
        with:
          compression-level: 0
          name: routeros-${{ matrix.ref }}
          path: |
            ${{ steps.create_release.outputs.dir }}/*

      - name: Remove release files
        id: remove_release
        run: |
          sudo rm -rf "${{ steps.create_release.outputs.dir }}"

      - name: Normalize files
        id: normalize_files
        if: ${{ fromJSON(inputs.extra_args).no_push != 'true' }}
        run: |
          sudo /tmp/normalize.sh
          sudo chown -hR $(id -un):$(id -gn) .
          find . -type f -o -type d \! -readable -exec bash -c 'echo "warning: {} is still not readable"' \;
          {
            echo '# This branch contains an unpacked routeros-...-light.tar.zst archive.'
            echo '# Unlike routeros-...-full.tar.zst, it lacks devices and sizeable files.'
            echo '# The following files have been excluded because their size exceeds 32MB.'
            cat 'exclusions.txt'
          } > '.gitignore'

      - name: Compose a commit message
        id: compose_message
        if: ${{ fromJSON(inputs.extra_args).no_push != 'true' }}
        run: |
          {
            echo 'message<<EOF'
            echo -e "Automatic changes by ${{ github.run_id }}:${{ github.run_attempt }}:process\n\n"
            echo -e "Run https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}"
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: Add files, commit and push
        id: push_files
        if: ${{ fromJSON(inputs.extra_args).no_push != 'true' }}
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          branch: ${{ matrix.ref }}
          commit_message: ${{ steps.compose_message.outputs.message }}
          push_options: '--force'
