name: 'RouterOS 7.x Internals Workflow'
run-name: "RouterOS 7.x: [${{ inputs.label }}]-[${{ inputs.channel }}]-[${{ inputs.version }}]-[${{ inputs.scope }}]"
on:
#  push:
#    branches:
#      - main
  workflow_dispatch:
    inputs:
      label:
        description: 'Label (e.g., vendor)'
        required: true
        default: 'vendor'
        type: choice
        options:
          - 'vendor'
          - 'elseif'
          - 'custom'
      channel:
        description: 'Channel (e.g., stable)'
        required: true
        default: 'stable'
        type: choice
        options:
          - 'stable'
          - 'testing'
          - 'stable,testing'
      version:
        description: 'Version (e.g., 7.19.4; empty means latest)'
        required: false
        default: 'latest'
        type: string
      scope:
        description: 'Scope of work (do jobs up to, inclusive)'
        required: true
        default: 'release'
        type: choice
        options:
          - 'validate'
          - 'download'
          - 'process'
          - 'release'
      release:
        description: 'Release files (or upload an artifact)'
        required: false
        default: true
        type: boolean
      reuse_releases:
        default: true
        description: 'Download: reuse released files'
        required: false
        type: boolean
      reuse_commits:
        default: true
        description: 'Download: reuse committed files'
        required: false
        type: boolean
      extras:
        default: '{"custom_label":"vnxme","custom_repo":"vnxme/MikroTikPatch","force_download":"false","force_process":"false","process_ignore_files":"false","no_push":"false"}'
        description: 'JSON of additional options'
        required: false
        type: string

permissions:
  actions: write
  contents: write

env:
  app: 'app'
  box: 'box'
  tmp: 'tmp'
  TZ: 'Europe/London'

jobs:
  validate:
    runs-on: ubuntu-24.04
    outputs:
      label: ${{ steps.validate_label.outputs.label }}
      channel: ${{ steps.validate_channel.outputs.channel }}
      version: ${{ steps.validate_version.outputs.version }}
      matrix: ${{ steps.generate_matrix.outputs.matrix }}
      scope: ${{ steps.validate_scope.outputs.scope }}
      scope_has_download: ${{ steps.validate_scope.outputs.download }}
      scope_has_process: ${{ steps.validate_scope.outputs.process }}
      scope_has_release: ${{ steps.validate_scope.outputs.release }}
    steps:
      - name: Validate label value
        id: validate_label
        run: |
          LABEL="$(echo "${{ inputs.label }}" | xargs)"
          if [ -z "$(echo "${LABEL}" | grep -P '^[0-9a-zA-Z]+$')" ]; then
            echo "::error input=label,value=${LABEL}::Invalid label value"
            exit 1
          fi
          echo "label=${LABEL}" >> $GITHUB_OUTPUT

      - name: Validate channel value
        id: validate_channel
        run: |
          CHANNEL="$(echo "${{ inputs.channel }}" | xargs)"
          readarray -d ',' -t CHANNELS < <(printf '%s' "${CHANNEL}")
          for CHANNEL in ${CHANNELS[@]}; do
            if [ "${CHANNEL}" != "stable" -a "${CHANNEL}" != "testing" ]; then
              echo "::error input=channel,value=${CHANNEL}::Invalid channel value"
              exit 1
            fi
          done
          printf -v CHANNEL '%s,' "${CHANNELS[@]}"
          echo "channel=${CHANNEL%,}" >> $GITHUB_OUTPUT

      - name: Validate version value
        id: validate_version
        run: |
          VERSION="$(echo "${{ inputs.version }}" | xargs)"
          CHANNEL="$(echo "${{ steps.validate_channel.outputs.channel }}" | xargs)"
          if [ -n "${VERSION}" -a "${VERSION}" != "latest" ]; then
            if [ -n "$(echo "${CHANNEL}" | grep ',')" ]; then
              echo "::error input=version,value=${VERSION}::Same version value can't apply to multiple channels"
              exit 1
            elif [ "${CHANNEL}" == "stable" ]; then
              if [ -z "$(echo "${VERSION}" | grep -P '^7\.[0-9]+(\.[0-9]+)?$')" ]; then
                echo "::error input=version,value=${VERSION}::Invalid version value for the ${CHANNEL} channel"
                exit 1
              fi
            elif [ "${CHANNEL}" == "testing" ]; then
              if [ -z "$(echo "${VERSION}" | grep -P '^7\.[0-9]+(\.[0-9]+)?(ab|beta|rc)[0-9]+$')" ]; then
                echo "::error input=version,value=${VERSION}::Invalid version value for the ${CHANNEL} channel"
                exit 1
              fi
            else
              echo "::warning::Unknown channel value, so version value has not been validated"
            fi
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Generate matrix using channel and version values
        id: generate_matrix
        run: |
          readarray -d ',' -t CHANNELS < <(printf '%s' "${{ steps.validate_channel.outputs.channel }}")
          VERSION="${{ steps.validate_version.outputs.version }}"
          JSON=""
          for CHANNEL in ${CHANNELS[@]}; do
            if [ -z "${VERSION}" -o "${VERSION}" == "latest" ]; then
              FILE="version_${CHANNEL}.txt"
              URL="https://download.mikrotik.com/routeros/NEWESTa7.${CHANNEL}"
              wget -nv -O ${FILE} ${URL} || rm -f ${FILE}
              if [ ! -f "${FILE}" ]; then
                echo "::error::Failed to get the latest version for the ${CHANNEL} channel"
                exit 1
              fi
              LATEST="$(cat ${FILE} | cut -d ' ' -f1)" && rm -f "${FILE}"
            else
              LATEST="${VERSION}"
            fi
            [ ${#JSON} -ne 0 ] && JSON="${JSON},"
            JSON="${JSON}{\"channel\":\"${CHANNEL}\",\"version\":\"${LATEST}\"}"
          done
          JSON="[${JSON}]"
          echo "matrix=${JSON}" >> $GITHUB_OUTPUT

      - name: Validate scope value
        id: validate_scope
        run: |
          SCOPE="$(echo "${{ inputs.scope }}" | xargs)"
          if [ "${SCOPE}" == "validate" ]; then
            DOWNLOAD=false
            PROCESS=false
            RELEASE=false
          elif [ "${SCOPE}" == "download" ]; then
            DOWNLOAD=true
            PROCESS=false
            RELEASE=false
          elif [ "${SCOPE}" == "process" ]; then
            DOWNLOAD=true
            PROCESS=true
            RELEASE=false
          elif [ "${SCOPE}" == "release" ]; then
            DOWNLOAD=true
            PROCESS=true
            RELEASE=true
          else
            echo "::error input=scope,value=${SCOPE}::Invalid scope value"
            exit 1
          fi
          echo "scope=${SCOPE%,}" >> $GITHUB_OUTPUT
          echo "download=${DOWNLOAD}" >> $GITHUB_OUTPUT
          echo "process=${PROCESS}" >> $GITHUB_OUTPUT
          echo "release=${RELEASE}" >> $GITHUB_OUTPUT

      - name: Compose a step summary
        id: compose_summary
        run: |
          {
            echo "### Outputs"
            echo "- label: \`${{ steps.validate_label.outputs.label }}\`"
            echo "- channel: \`${{ steps.validate_channel.outputs.channel }}\`"
            echo "- version: \`${{ steps.validate_version.outputs.version }}\`"
            echo "- matrix: \`${{ steps.generate_matrix.outputs.matrix }}\`"
            echo "- scope: \`${{ steps.validate_scope.outputs.scope }}\`"
            echo "- scope_has_download: \`${{ steps.validate_scope.outputs.download }}\`"
            echo "- scope_has_process: \`${{ steps.validate_scope.outputs.process }}\`"
            echo "- reuse_releases: \`${{ inputs.reuse_releases }}\`"
            echo "- reuse_commits: \`${{ inputs.reuse_commits }}\`"
            echo "- extras: \`${{ inputs.extras }}\`"
          } >> $GITHUB_STEP_SUMMARY

  download:
    needs: validate
    if: needs.validate.outputs.scope_has_download == 'true'
    strategy:
      matrix:
        include: ${{ fromJSON(needs.validate.outputs.matrix) }}
    runs-on: ubuntu-24.04
    env:
      key: "${{ needs.validate.outputs.label }}-${{ matrix.version }}-download"
    steps:
      - name: Look up downloaded files in cache
        id: lookup
        uses: actions/cache/restore@v4
        with:
          key: "${{ env.key }}"
          lookup-only: true
          path:
            "${{ env.tmp }}/${{ env.key }}.tar.zst"

      - name: Make '${{ env.app }}', '${{ env.box }}' and '${{ env.tmp }}' directories
        id: make_dirs
        if: ${{ fromJSON(inputs.extras).force_download == 'true' || steps.lookup.outputs.cache-hit != 'true' }}
        run: |
          mkdir -p {"${{ env.app }}","${{ env.box }}","${{ env.tmp }}"}

      - name: Checkout 'main' branch into '${{ env.app }}' directory
        id: checkout_repository
        if: ${{ fromJSON(inputs.extras).force_download == 'true' || steps.lookup.outputs.cache-hit != 'true' }}
        uses: actions/checkout@v5
        with:
          path: "${{ env.app }}"

      - name: Download files from release, branch or vendor into '${{ env.box }}' directory
        id: download_files
        if: ${{ fromJSON(inputs.extras).force_download == 'true' || steps.lookup.outputs.cache-hit != 'true' }}
        env:
          label: "${{ needs.validate.outputs.label }}"
        run: |
          sudo "${{ env.app }}/download.sh" -d "${{ env.box }}" -l "${{ env.label }}" -v "${{ matrix.version }}"

      - name: Create an archive in '${{ env.tmp }}' directory with downloaded files in '${{ env.box }}' directory
        id: create_archive
        if: ${{ fromJSON(inputs.extras).force_download == 'true' || steps.lookup.outputs.cache-hit != 'true' }}
        run: |
          FILE="${{ env.tmp }}/${{ env.key }}.tar.zst"
          sudo tar --zst -cf "${FILE}" -C "${{ env.box }}" .

      - name: Delete downloaded files from cache
        id: delete_cache
        if: ${{ fromJSON(inputs.extras).force_download == 'true' && steps.lookup.outputs.cache-hit == 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh api --method DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/caches?key=${{ env.key }}&ref=${{ github.ref }}

      - name: Save downloaded files from '${{ env.box }}' directory to cache
        id: save_cache
        if: ${{ fromJSON(inputs.extras).force_download == 'true' || steps.lookup.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@v4
        with:
          key: "${{ env.key }}"
          path: 
            "${{ env.tmp }}/${{ env.key }}.tar.zst"

  process:
    needs:
      - validate
      - download
    if: needs.validate.outputs.scope_has_process == 'true'
    strategy:
      matrix:
        include: ${{ fromJSON(needs.validate.outputs.matrix) }}
    runs-on: ubuntu-24.04
    env:
      dkey: "${{ needs.validate.outputs.label }}-${{ matrix.version }}-download"
      key: "${{ needs.validate.outputs.label }}-${{ matrix.version }}-process"
    steps:
      - name: Look up processed files in cache
        id: lookup
        uses: actions/cache/restore@v4
        with:
          key: "${{ env.key }}"
          lookup-only: 'true'
          path:
            "${{ env.box }}/${{ env.key }}.tar.zst"

      - name: Make '${{ env.app }}', '${{ env.box }}' and '${{ env.tmp }}' directories
        id: make_dirs
        if: ${{ fromJSON(inputs.extras).force_process == 'true' || steps.lookup.outputs.cache-hit != 'true' }}
        run: |
          mkdir -p {"${{ env.app }}","${{ env.box }}","${{ env.tmp }}"}

      - name: Restore an archive with downloaded files from cache into '${{ env.tmp }}' directory
        id: restore_cache
        if: ${{ fromJSON(inputs.extras).force_process == 'true' || steps.lookup.outputs.cache-hit != 'true' }}
        uses: actions/cache/restore@v4
        with:
          key: "${{ env.dkey }}"
          path:
            "${{ env.box }}/${{ env.dkey }}.tar.zst"

      - name: Unpack downloaded files into '${{ env.box }}' directory
        id: unpack_archive
        if: ${{ steps.restore_cache.outputs.cache-hit == 'true' }}
        run: |
          FILE="${{ env.tmp }}/${{ env.dkey }}.tar.zst"
          sudo tar --zst -xf "${FILE}" -C "${{ env.box }}" && rm -f "${FILE}"
          cd "${{ env.box }}" && sudo find . -type f > "../${{ env.tmp }}/downloaded.txt"
          cd .. && cat "${{ env.tmp }}/downloaded.txt"

      - name: Checkout 'main' branch into '${{ env.app }}' directory
        id: checkout_repository
        if: ${{ steps.restore_cache.outputs.cache-hit == 'true' }}
        uses: actions/checkout@v5
        with:
          path: "${{ env.app }}"

      - name: Install requirements leveraging cache
        id: install_requirements
        if: ${{ steps.restore_cache.outputs.cache-hit == 'true' }}
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          execute_install_scripts: true
          packages: binutils-common binwalk bzip2 device-tree-compiler genisoimage gzip lz4 lzma lzop qemu-utils rsync xz-utils zip zstd
          version: 1.0

      - name: Process files in '${{ env.box }}' directory
        id: process_files
        if: ${{ steps.restore_cache.outputs.cache-hit == 'true' }}
        run: |
          if [ " ${{ fromJson(inputs.extras).process_ignore_files }}" != "true" ]; then
            sudo "${{ env.app }}/process.sh" "${{ env.box }}"
          fi

      - name: Create an archive in '${{ env.tmp }}' directory with processed files in '${{ env.box }}' directory
        id: create_archive
        if: ${{ steps.restore_cache.outputs.cache-hit == 'true' }}
        run: |
          FILE="${{ env.tmp }}/${{ env.key }}.tar.zst"
          sudo tar --zst -cf "${FILE}" -X "${{ env.tmp }}/downloaded.txt" -C "${{ env.box }}" .

      - name: Delete processed files from cache
        id: delete_cache
        if: ${{ steps.restore_cache.outputs.cache-hit == 'true' && steps.lookup.outputs.cache-hit == 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh api --method DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/caches?key=${{ env.key }}&ref=${{ github.ref }}

      - name: Save processed files from '${{ env.box }}' directory to cache
        id: save_cache
        if: ${{ steps.restore_cache.outputs.cache-hit == 'true' }}
        uses: actions/cache/save@v4
        with:
          key: "${{ env.key }}"
          path:
            "${{ env.box }}/${{ env.key }}.tar.zst"

  release:
    needs:
      - validate
      - download
      - process
    if: needs.validate.outputs.scope_has_release == 'true'
    strategy:
      matrix:
        include: ${{ fromJSON(needs.validate.outputs.matrix) }}
    runs-on: ubuntu-24.04
    env:
      branch: "${{ needs.validate.outputs.label }}-${{ matrix.version }}"
      dkey: "${{ needs.validate.outputs.label }}-${{ matrix.version }}-download"
      pkey: "${{ needs.validate.outputs.label }}-${{ matrix.version }}-process"
      tag: "v${{ matrix.version }}-${{ needs.validate.outputs.label }}"
    steps:
      - name: Make '${{ env.app }}', '${{ env.box }}' and '${{ env.tmp }}' directories
        id: make_dirs
        run: |
          mkdir -p {"${{ env.app }}","${{ env.box }}","${{ env.tmp }}"}

      - name: Checkout 'main' branch into '${{ env.box }}' directory
        id: checkout_repository
        uses: actions/checkout@v5
        with:
          path: "${{ env.box }}"

#      - name: Checkout '${{ env.branch }}' branch into '${{ env.box }}' directory
#        id: checkout_repository
#        uses: actions/checkout@v5
#        with:
#          path: "${{ env.box }}"
#          ref: "${{ env.branch }}"

      - name: Switch 'main' branch to '${{ env.branch }}' branch
        id: switch_branch
        run: |
          cd "${{ env.box }}" && git switch --orphan "${{ env.branch }}"

      - name: Restore an archive with downloaded files from cache into '${{ env.tmp }}' directory
        id: restore_downloaded
        uses: actions/cache/restore@v4
        with:
          key: "${{ env.dkey }}"
          path:
            "${{ env.tmp }}/${{ env.dkey }}.tar.zst"

      - name: Restore an archive with processed files from cache into '${{ env.tmp }}' directory
        id: restore_processed
        uses: actions/cache/restore@v4
        with:
          key: "${{ env.pkey }}"
          path:
            "${{ env.tmp }}/${{ env.pkey }}.tar.zst"

      - name: Extract archives with downloaded and processed files into '${{ env.box }}' directory
        id: extract_archives
        if: ${{ steps.restore_downloaded.outputs.cache-hit == 'true' && steps.restore_processed.outputs.cache-hit == 'true' }}
        run: |
          FILE="${{ env.tmp }}/${{ env.dkey }}.tar.zst"
          sudo tar --zst -xf "${FILE}" -C "${{ env.box }}" && rm -f "${FILE}"
          
          FILE="${{ env.tmp }}/${{ env.pkey }}.tar.zst"
          sudo tar --zst -xf "${FILE}" -C "${{ env.box }}" && rm -f "${FILE}"

      - name: Create release files
        id: create_release
        if: ${{ steps.restore_downloaded.outputs.cache-hit == 'true' && steps.restore_processed.outputs.cache-hit == 'true' }}
        run: |
          EXCL='exclusions.txt'
          sudo find "${{ env.box }}"/* -type f -size +32M > "${{ env.box }}/${EXCL}" || true
          
          DIR="${{ env.tmp }}"
          mkdir -p "${DIR}"
          
          FILE="${DIR}/routeros-${{ env.branch }}-full.tar.zst"
          sudo tar --zst -cf "${FILE}" --owner=0 --group=0 --exclude='.git' --exclude="${EXCL}" -C "${{ env.box }}" .
          du -h "${FILE}"
          
          FILE="${DIR}/routeros-${{ env.branch }}-light.tar.zst"
          sudo tar --zst -cf "${FILE}" --owner=0 --group=0 --exclude='.git' -X "${EXCL}"  -C "${{ env.box }}" .
          du -h "${FILE}"

      - name: Delete duplicate release and tag
        id: delete_release
        if: ${{ steps.restore_downloaded.outputs.cache-hit == 'true' && steps.restore_processed.outputs.cache-hit == 'true' && inputs.release }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          ID="$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/releases/tags/${{ env.tag }} \
            --jq '.id')"
          if [ -n "${ID}" ]; then
            gh api --method DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{ github.repository }}/releases/${ID}          
            gh api --method DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{ github.repository }}/git/refs/tags/${{ env.tag }}
          fi

      - name: Upload release files as attachments
        id: upload_attachments
        if: ${{ steps.restore_downloaded.outputs.cache-hit == 'true' && steps.restore_processed.outputs.cache-hit == 'true' && inputs.release }}
        uses: softprops/action-gh-release@v2
        with:
          name: "RouterOS ${{ matrix.version }} by ${{ needs.validate.outputs.label }}"
          body_path: 'changelog.txt'
          tag_name: "${{ env.tag }}"
#          make_latest:  ${{ matrix.channel == 'stable' }}
          prerelease:  ${{ matrix.channel == 'testing' }}
          files: |
            "${{ env.tmp }}"/*

      - name: Upload release files as artifacts
        id: upload_artifacts
        if: ${{ steps.restore_downloaded.outputs.cache-hit == 'true' && steps.restore_processed.outputs.cache-hit == 'true' && !inputs.release }}
        uses: actions/upload-artifact@v4
        with:
          compression-level: 0
          name: "${{ env.branch }}"
          path: |
            "${{ env.tmp }}"/*

      - name: Remove release files
        id: remove_release
        if: ${{ steps.restore_downloaded.outputs.cache-hit == 'true' && steps.restore_processed.outputs.cache-hit == 'true' }}
        run: |
          sudo rm -f "${{ env.tmp }}"/*

      - name: Normalize files
        id: normalize_files
        if: ${{ steps.restore_downloaded.outputs.cache-hit == 'true' && steps.restore_processed.outputs.cache-hit == 'true' && fromJSON(inputs.extras).no_push != 'true' }}
        run: |
          sudo "${{ env.app }}/normalize.sh" "${{ env.box }}"
          sudo chown -hR $(id -un):$(id -gn) "${{ env.box }}"
          find "${{ env.box }}"/* -type f -o -type d \! -readable -exec bash -c 'echo "warning: {} is still not readable"' \;
          {
            echo '# This branch contains an unpacked routeros-...-light.tar.zst archive.'
            echo '# Unlike routeros-...-full.tar.zst, it lacks devices and sizeable files.'
            echo '# The following files have been excluded because their size exceeds 32MB.'
            sort "${{ env.box }}/exclusions.txt" | xargs du -h | gawk '{print $2 " # " $1}'
          } > "${{ env.box }}/.gitignore"

      - name: Compose a commit message
        id: compose_message
        if: ${{ steps.restore_downloaded.outputs.cache-hit == 'true' && steps.restore_processed.outputs.cache-hit == 'true' && fromJSON(inputs.extras).no_push != 'true' }}
        run: |
          {
            echo 'message<<EOF'
            echo -e "Automatic changes by ${{ github.run_id }}:${{ github.run_attempt }}:process\n\n"
            echo -e "Run https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}"
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: Add files, commit and push
        id: push_files
        if: ${{ steps.restore_downloaded.outputs.cache-hit == 'true' && steps.restore_processed.outputs.cache-hit == 'true' && fromJSON(inputs.extras).no_push != 'true' }}
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          branch: ${{ env.branch }}
          commit_message: ${{ steps.compose_message.outputs.message }}
          push_options: '--force'
          repository: "${{ env.box }}"
