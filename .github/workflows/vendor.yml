name: Vendor RouterOS 7.x Internals Workflow
on:
  push:
    branches:
      - main

permissions:
  contents: write

env:
  BRANCH_HOST: 'download.mikrotik.com'
  BRANCH_PREFIX: 'vendor'
  BRANCH_VERSION: ${{ secrets.VENDOR_BRANCH_VERSION }}

jobs:
  Obtain_Internals:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        channel: [ stable ]
        #channel: [ stable, testing ]
    env:
      TZ: 'Europe/London'
    steps:
      - name: Install requirements
        run: |
          echo $(uname -a)
          sudo apt-get update > /dev/null
          sudo apt-get install -y genisoimage > /dev/null
          #sudo apt-get install -y dosfstools extlinux mkisofs rsync qemu-utils xorriso zip zstd > /dev/null
          #sudo modprobe nbd > /dev/null

      #- name: Install Python
      #  uses: actions/setup-python@v5
      #  with:
      #    python-version: '3.11'

      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Get the latest version
        run: |
          if [[ -z "${{ env.BRANCH_VERSION }}" ]]; then
            BRANCH_VERSION_URL="https://${{ env.BRANCH_HOST }}/routeros/NEWESTa7.${{ matrix.channel }}"
            echo "BRANCH_VERSION_URL=${BRANCH_VERSION_URL}"
            BRANCH_VERSION=$(wget -nv -O - ${BRANCH_VERSION_URL} | cut -d ' ' -f1)
            echo "BRANCH_VERSION=${BRANCH_VERSION}"
          fi
          echo "BRANCH_VERSION=${BRANCH_VERSION}" >> $GITHUB_ENV

      - name: Prepare an empty branch
        run: |
          BRANCH_NAME="${{ env.BRANCH_PREFIX }}-${{ matrix.channel }}-${{ env.BRANCH_VERSION }}"
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
          git switch --orphan ${BRANCH_NAME}

      - name: Get a changelog
        run: |
          BRANCH_CHANGELOG_URL="https://${{ env.BRANCH_HOST }}/routeros/${BRANCH_VERSION}/CHANGELOG"
          echo "BRANCH_CHANGELOG_URL=${BRANCH_CHANGELOG_URL}"
          wget -nv -O changelog.txt ${BRANCH_CHANGELOG_URL}

      - name: Create directories
        run: |
          ARHCS=(arm64 x86)
          for ARCH in ${ARHCS[@]}; do
            mkdir -p ${ARCH}
          done

      - name: Download files
        run: |
          ARHCS=(arm64 x86)
          PACKAGES=(routeros calea container dude extra-nic gps iot iot-bt-extra lora rose-storage switch-marvell tr069-client ups user-manager wifi-qcom wireless zerotier)
          for ARCH in ${ARHCS[@]}; do
            if [ "${ARCH}" == 'x86' ]; then
              SUFFIX=''
            else
              SUFFIX="-${ARCH}"
            fi
            IMG_FILE="${ARCH}/chr-${BRANCH_VERSION}${SUFFIX}.img.zip"
            IMG_URL="https://${{ env.BRANCH_HOST }}/routeros/${BRANCH_VERSION}/chr-${BRANCH_VERSION}${SUFFIX}.img.zip"
            wget -nv -O ${IMG_FILE} ${IMG_URL} || true
            ISO_FILE="${ARCH}/mikrotik-${BRANCH_VERSION}${SUFFIX}.iso"
            ISO_URL="https://${{ env.BRANCH_HOST }}/routeros/${BRANCH_VERSION}/mikrotik-${BRANCH_VERSION}${SUFFIX}.iso"
            wget -nv -O ${ISO_FILE} ${ISO_URL} || true
            for PACKAGE in ${PACKAGES[@]}; do
              FILE="${ARCH}/${PACKAGE}-${BRANCH_VERSION}${SUFFIX}.npk"
              URL="https://${{ env.BRANCH_HOST }}/routeros/${BRANCH_VERSION}/${PACKAGE}-${BRANCH_VERSION}${SUFFIX}.npk"
              wget -nv -O ${FILE} ${URL} || true
            done
          done

      - name: Unpack ISO files
        run: |
          wget -nv -O /tmp/extract-vmlinux "https://raw.githubusercontent.com/torvalds/linux/master/scripts/extract-vmlinux" || true
          chmod +x /tmp/extract-vmlinux
          mkdir -p /tmp/{img,iso}
          ARHCS=(arm64 x86)
          for ARCH in ${ARHCS[@]}; do
            ISO_FILES=$(find ${ARCH}/*.iso)
            for ISO_FILE in ${ISO_FILES}; do
              ISO_FILE_INFO="$(file ${ISO_FILE} | cut -f 2- -d ' ')\n\n$(isoinfo -d -i ${ISO_FILE})"
              ISO_FILE_DIR="${ARCH}/$(basename ${ISO_FILE})_"
              mkdir -p "${ISO_FILE_DIR}"
              sudo mount -o loop,ro "${ISO_FILE}" /tmp/iso
              rsync -rltgoD /tmp/iso/ "${ISO_FILE_DIR}/"
              ISO_FILE_LS=$(ls -AlR /tmp/iso/)
              sudo umount /tmp/iso
              ISO_FILE_NPK_FILES=$(find ${ISO_FILE_DIR}/*.npk)
              for ISO_FILE_NPK_FILE in ${ISO_FILE_NPK_FILES}; do
                HASH1="$(sha256sum ${ISO_FILE_NPK_FILE} | gawk '{ print $1 }')"
                HASH2="$(sha256sum ${ARCH}/$(basename ${ISO_FILE_NPK_FILE}) | gawk '{ print $1 }')"
                if [ "${HASH1}" == "${HASH2}" ]; then
                  rm ${ISO_FILE_NPK_FILE}
                  ln -s ../$(basename ${ISO_FILE_NPK_FILE}) ${ISO_FILE_NPK_FILE}
                fi
              done
              IMG_FILES=$(find ${ISO_FILE_DIR}/*.img)
              for IMG_FILE in ${IMG_FILES}; do
                if [ "$(basename ${IMG_FILE})" == "efiboot.img" ]; then
                  IMG_FILE_INFO="$(file ${IMG_FILE} | cut -f 2- -d ' ')"
                  IMG_FILE_DIR="$(dirname ${IMG_FILE})/$(basename ${IMG_FILE})_"
                  sudo mount -o loop,ro "${IMG_FILE}" /tmp/img
                  rsync -rltgoD /tmp/img/ "${IMG_FILE_DIR}/"
                  IMG_FILE_LS=$(ls -AlR /tmp/img/)
                  sudo umount /tmp/img
                  EFI_FILES=$(find ${IMG_FILE_DIR}/EFI/BOOT/*.EFI)
                  for EFI_FILE in ${EFI_FILES}; do
                    EFI_FILE_INFO="$(file ${EFI_FILE} | cut -f 2- -d ' ')"
                    EFI_FILE_DIR="$(dirname ${EFI_FILE})/$(basename ${EFI_FILE})_"
                    /tmp/extract-vmlinux "${EFI_FILE}" > "${EFI_FILE_DIR}/vmlinux"
                    EFI_FILE_README="${EFI_FILE_DIR}/README.md"
                    echo -e "### $(basename ${EFI_FILE})\n" > "${EFI_FILE_README}"
                    echo -e "#### Description:\n\`\`\`\n${EFI_FILE_INFO}\n\`\`\`\n" >> "${EFI_FILE_README}"
                    echo -e "#### Internals:\n\`\`\`\n$(binwalk ${EFI_FILE})\n\`\`\`\n" >> "${EFI_FILE_README}"
                    echo -e "#### Linux kernel:\n\`\`\`\n$(binwalk ${EFI_FILE_DIR}/vmlinux)\n\`\`\`\n" >> "${EFI_FILE_README}"
                  done
                  IMG_FILE_README="${IMG_FILE_DIR}/README.md"
                  echo -e "### $(basename ${IMG_FILE})\n" > "${IMG_FILE_README}"
                  echo -e "#### Description:\n\`\`\`\n${IMG_FILE_INFO}\n\`\`\`\n" >> "${IMG_FILE_README}"
                  echo -e "#### Internals:\n\`\`\`\n${IMG_FILE_LS}\n\`\`\`\n" >> "${IMG_FILE_README}"
                fi
              done
              ISO_FILE_README="${ISO_FILE_DIR}/README.md"
              echo -e "### $(basename ${ISO_FILE})\n" > "${ISO_FILE_README}"
              echo -e "#### Description:\n\`\`\`\n${ISO_FILE_INFO}\n\`\`\`\n" >> "${ISO_FILE_README}"
              echo -e "#### Internals:\n\`\`\`\n${ISO_FILE_LS}\n\`\`\`\n" >> "${ISO_FILE_README}"
              echo -e "#### Notes:\n- Some NPK files are replaced with symlinks to save space, " >> "${ISO_FILE_README}"
              echo -e "if their SHA256 hashes match those of NPK files downloaded separately.\n" >> "${ISO_FILE_README}"
            done
          done
          rm -rf /tmp/{img,iso}

      - name: Add files, commit and push
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: ${{ env.BRANCH_NAME }}
          create_branch: true
          push_options: '--force'
