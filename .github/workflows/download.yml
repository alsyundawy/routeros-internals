name: RouterOS 7.x Download Workflow

on:
  workflow_call:
    inputs:
      channel:
        required: true
        type: string
      host:
        required: true
        type: string
      override_cache:
        default: false
        required: false
        type: boolean
      prefix:
        required: true
        type: string
      ref:
        required: true
        type: string
      reuse_commits:
        default: true
        required: false
        type: boolean
      reuse_releases:
        default: true
        required: false
        type: boolean
      tag:
        required: true
        type: string
      version:
        required: true
        type: string

permissions:
  actions: write
  contents: write

jobs:
  download:
    runs-on: ubuntu-24.04
    steps:
      - name: Look up downloaded files in cache
        id: lookup_cache
        uses: actions/cache/restore@v4
        with:
          key: "${{ inputs.ref }}-download"
          lookup-only: true
          path: 'sandbox'

      - name: Generate download URLs
        id: generate_urls
        if: ${{ inputs.override_cache || steps.lookup_cache.outputs.cache-hit != 'true' }}
        run: |
          BRANCH="${{ inputs.ref }}"
          TAG="${{ inputs.tag }}"
          echo "self_r=https://github.com/${{ github.repository }}/releases/download/${TAG}" >> $GITHUB_OUTPUT
          echo "self_c=https://github.com/${{ github.repository }}/raw/refs/heads/${BRANCH}" >> $GITHUB_OUTPUT
          echo "vendor=https://${{ inputs.host }}/routeros/${{ inputs.version }}" >> $GITHUB_OUTPUT

      - name: Download everything
        id: download_everything
        if: ${{ inputs.override_cache || steps.lookup_cache.outputs.cache-hit != 'true' }}
        run: |
          mkdir -p 'sandbox' && cd 'sandbox'
          FILE="routeros-${{ inputs.ref }}-full.tar.zst"
          if [ "${{ inputs.reuse_releases }}" == "true" ]; then
            URL="${{ steps.generate_urls.outputs.self_r }}/${FILE}"
            wget -nv -O "/tmp/${FILE}" "${URL}" || rm -f "/tmp/${FILE}"
          fi
          if [ -f "/tmp/${FILE}" ]; then
            sudo tar --zst -xf "/tmp/${FILE}" -C . && rm -f "/tmp/${FILE}"
            sudo /tmp/cleanup.sh
            echo "done=true" >> $GITHUB_OUTPUT
          else
            echo "done=false" >> $GITHUB_OUTPUT
          fi

      - name: Download a changelog
        id: download_changelog
        if: ${{ steps.download_everything.outputs.done != 'true' && (inputs.override_cache || steps.lookup_cache.outputs.cache-hit != 'true') }}
        run: |
          mkdir -p 'sandbox' && cd 'sandbox'
          FILE="changelog.txt"
          if [ "${{ inputs.reuse_commits }}" == "true" ]; then
            URL="${{ steps.generate_urls.outputs.self_c }}/${FILE}"
            wget -nv -O "${FILE}" "${URL}" || rm -f "${FILE}"
          fi
          if [ ! -f "${FILE}" ]; then
            URL="${{ steps.generate_urls.outputs.vendor }}/CHANGELOG"
            wget -nv -O "${FILE}" "${URL}" || rm -f "${FILE}"
          fi

      - name: Download packages
        id: download_packages
        if: ${{ steps.download_everything.outputs.done != 'true' && (inputs.override_cache || steps.lookup_cache.outputs.cache-hit != 'true') }}
        run: |
          mkdir -p 'sandbox' && cd 'sandbox'
          
          PACKAGES_FILE="packages.txt"
          if [ "${{ inputs.reuse_commits }}" == "true" ]; then
            URL="${{ steps.generate_urls.outputs.self_c }}/${PACKAGES_FILE}"
            wget -nv -O "${PACKAGES_FILE}" "${URL}" || rm -f "${PACKAGES_FILE}"
          fi

          ARCHS=(arm arm64 mipsbe mmips ppc smips tile x86)
          PACKAGES=(routeros)
          VERSION="${{ inputs.version }}"
          for ARCH in ${ARCHS[@]}; do
            mkdir -p ${ARCH}
            [ "${ARCH}" == 'x86' ] && SUFFIX='' || SUFFIX="-${ARCH}"
            
            for PACKAGE in ${PACKAGES[@]}; do
              FILE="${ARCH}/${PACKAGE}-${VERSION}${SUFFIX}.npk"
              if [ "${{ inputs.reuse_commits }}" == "true" ]; then
                URL="${{ steps.generate_urls.outputs.self_c }}/${FILE}"
                wget -nv -O "${FILE}" "${URL}" || rm -f "${FILE}"
              fi
              if [ ! -f "${FILE}" ]; then
                URL="${{ steps.generate_urls.outputs.vendor }}/${PACKAGE}-${VERSION}${SUFFIX}.npk"
                wget -nv -O "${FILE}" "${URL}" || rm -f "${FILE}"
              fi
            done
            
            if [ ${#PACKAGES[@]} -eq 1 -a "${PACKAGES[0]}" == "routeros" ]; then
              DOWNLOAD_ALL_PACKAGES=true
              if [ "${{ inputs.reuse_commits }}" == "true" -a -f "${PACKAGES_FILE}" ]; then
                OTHER_PACKAGES=$(cat "${PACKAGES_FILE}" | grep "${ARCH}/")
                for OTHER_PACKAGE in ${OTHER_PACKAGES[@]}; do
                  FILE="${OTHER_PACKAGE}"
                  URL="${{ steps.generate_urls.outputs.self_c }}/${FILE}"
                  wget -nv -O "${FILE}" "${URL}" || rm -f "${FILE}"
                done
                DOWNLOAD_ALL_PACKAGES=false
              fi
              if [ "${DOWNLOAD_ALL_PACKAGES}" == "true" ]; then
                FILE="${ARCH}/all_packages-${VERSION}${SUFFIX}.zip"
                URL="${{ steps.generate_urls.outputs.vendor }}/all_packages-${ARCH}-${VERSION}.zip"
                wget -nv -O "${FILE}" "${URL}" || rm -f "${FILE}"
                if [ -f "${FILE}" ]; then
                  unzip -o -d "${ARCH}/" "${FILE}" && rm -f "${FILE}"
                  find ${ARCH}/* -maxdepth 0 -type f -name '*.npk' ! -name 'routeros*.npk' >> "${PACKAGES_FILE}"
                fi
              fi
            fi
          done

      - name: Download images
        id: download_images
        if: ${{ steps.download_everything.outputs.done != 'true' && (inputs.override_cache || steps.lookup_cache.outputs.cache-hit != 'true') }}
        run: |
          mkdir -p 'sandbox' && cd 'sandbox'
          ARCHS=(arm64 x86)
          VERSION="${{ inputs.version }}"
          for ARCH in ${ARCHS[@]}; do
            mkdir -p ${ARCH}
            [ "${ARCH}" == 'x86' ] && SUFFIX='' || SUFFIX="-${ARCH}"
            
            FILE="${ARCH}/chr-${VERSION}${SUFFIX}.img.zip"
            if [ "${{ inputs.reuse_commits }}" == "true" ]; then
              URL="${{ steps.generate_urls.outputs.self_c }}/${FILE}"
              wget -nv -O "${FILE}" "${URL}" || rm -f "${FILE}"
            fi
            if [ ! -f "${FILE}" ]; then
              URL="${{ steps.generate_urls.outputs.vendor }}/chr-${VERSION}${SUFFIX}.img.zip"
              wget -nv -O "${FILE}" "${URL}" || rm -f "${FILE}"
            fi
            
            FILE="${ARCH}/mikrotik-${VERSION}${SUFFIX}.iso"
            if [ "${{ inputs.reuse_commits }}" == "true" ]; then
              URL="${{ steps.generate_urls.outputs.self_c }}/${FILE}"
              wget -nv -O "${FILE}" "${URL}" || rm -f "${FILE}"
            fi
            if [ ! -f "${FILE}" ]; then
              URL="${{ steps.generate_urls.outputs.vendor }}/mikrotik-${VERSION}${SUFFIX}.iso"
              wget -nv -O "${FILE}" "${URL}" || rm -f "${FILE}"
            fi
            
            if [ "${ARCH}" == 'x86' ]; then
              FILE="${ARCH}/install-image-${VERSION}${SUFFIX}.img.zip"
              if [ "${{ inputs.reuse_commits }}" == "true" ]; then
                URL="${{ steps.generate_urls.outputs.self_c }}/${FILE}"
                wget -nv -O "${FILE}" "${URL}" || rm -f "${FILE}"
              fi
              if [ ! -f "${FILE}" ]; then
                URL="${{ steps.generate_urls.outputs.vendor }}/install-image-${VERSION}${SUFFIX}.zip"
                wget -nv -O "${FILE}" "${URL}" || rm -f "${FILE}"
              fi
            fi
          done

      - name: Download binaries
        id: download_binaries
        if: ${{ steps.download_everything.outputs.done != 'true' && (inputs.override_cache || steps.lookup_cache.outputs.cache-hit != 'true') }}
        run: |
          mkdir -p 'sandbox' && cd 'sandbox'
          ARCHS=(x86)
          VERSION="${{ inputs.version }}"
          for ARCH in ${ARCHS[@]}; do
            mkdir -p ${ARCH}
            [ "${ARCH}" == 'x86' ] && SUFFIX='' || SUFFIX="-${ARCH}"
            
            FILE="${ARCH}/netinstall-cli-${VERSION}${SUFFIX}.tar.gz"
            if [ "${{ inputs.reuse_commits }}" == "true" ]; then
              URL="${{ steps.generate_urls.outputs.self_c }}/${FILE}"
              wget -nv -O "${FILE}" "${URL}" || rm -f "${FILE}"
            fi
            if [ ! -f "${FILE}" ]; then
              URL="${{ steps.generate_urls.outputs.vendor }}/netinstall-${VERSION}${SUFFIX}.tar.gz"
              wget -nv -O "${FILE}" "${URL}" || rm -f "${FILE}"
            fi
            
            FILE="${ARCH}/netinstall-w32-${VERSION}${SUFFIX}.exe.zip"
            if [ "${{ inputs.reuse_commits }}" == "true" ]; then
              URL="${{ steps.generate_urls.outputs.self_c }}/${FILE}"
              wget -nv -O "${FILE}" "${URL}" || rm -f "${FILE}"
            fi
            if [ ! -f "${FILE}" ]; then
              URL="${{ steps.generate_urls.outputs.vendor }}/netinstall-${VERSION}${SUFFIX}.zip"
              wget -nv -O "${FILE}" "${URL}" || rm -f "${FILE}"
            fi
            
            FILE="${ARCH}/netinstall-w64-${VERSION}${SUFFIX}.exe.zip"
            if [ "${{ inputs.reuse_commits }}" == "true" ]; then
              URL="${{ steps.generate_urls.outputs.self_c }}/${FILE}"
              wget -nv -O "${FILE}" "${URL}" || rm -f "${FILE}"
            fi
            if [ ! -f "${FILE}" ]; then
              URL="${{ steps.generate_urls.outputs.vendor }}/netinstall64-${VERSION}${SUFFIX}.zip"
              wget -nv -O "${FILE}" "${URL}" || rm -f "${FILE}"
            fi
          done

      - name: Delete downloaded files from cache
        id: delete_cache
        if: ${{ inputs.override_cache && steps.lookup_cache.outputs.cache-hit == 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh api --method DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/caches?key=${{ inputs.ref }}-download&ref=${{ github.ref }}

      - name: Save downloaded files from 'sandbox' directory to cache
        id: save_cache
        if: ${{ inputs.override_cache || steps.lookup_cache.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@v4
        with:
          key: "${{ inputs.ref }}-download"
          path: 'sandbox'
